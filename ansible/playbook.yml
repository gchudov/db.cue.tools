---
- name: Manage system setup
  hosts: localhost
  tasks:
    - name: Install Docker
      become: yes
      yum:
        name: docker
        state: present

    - name: Enable Docker service
      become: yes
      service:
        name: docker
        enabled: yes

    - name: Start Docker service
      become: yes
      service:
        name: docker
        state: started

    - name: Install tmux
      become: yes
      yum:
        name: tmux
        state: present

    - name: Check if Docker network 'ct' exists
      command: docker network inspect ct
      register: docker_network_check
      ignore_errors: yes

    - name: Create Docker network 'ct'
      command: docker network create ct
      when: docker_network_check.rc != 0

    - name: Download and install VS Code CLI for Amazon Graviton
      become: yes
      shell: |
        if [ ! -f /usr/local/bin/code ]; then
          curl -L --no-progress-meter "https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64" -o /tmp/vscode-cli.tar.gz
          tar -xzf /tmp/vscode-cli.tar.gz -C /usr/local/bin
          rm /tmp/vscode-cli.tar.gz
        fi
      args:
        creates: /usr/local/bin/code

  #   - name: Add freedb cron job
  #     ansible.builtin.cron:
  #       name: "freedb"
  #       minute: "51"
  #       hour: "1"
  #       day: "5"
  #       job: "/opt/ctdb/www/ctdbweb/utils/freedb/request_spot.sh >> /var/log/reqspot 2>&1"
  #       user: "root"

  #   - name: Add discogs cron job
  #     ansible.builtin.cron:
  #       name: "discogs"
  #       minute: "41"
  #       hour: "1"
  #       day: "5"
  #       job: "/opt/ctdb/www/ctdbweb/utils/discogs/request_spot.sh >> /var/log/reqspot 2>&1"
  #       user: "root"

  #   - name: Add mbslave cron job
  #     ansible.builtin.cron:
  #       name: "mbslave"
  #       minute: "15"
  #       job: "/root/mbslave/mbslave-sync.py >> /var/log/mbreplication 2>&1"
  #       user: "root"

  #   - name: Add stats cron job
  #     ansible.builtin.cron:
  #       name: "stats"
  #       minute: "1"
  #       job: "/usr/bin/psql -U ctdb_user ctdb -f /opt/ctdb/www/ctdbweb/utils/hourly_stats.sql >> /dev/null 2>&1"
  #       user: "root"

    - name: Run PostgreSQL 16 container
      become: yes
      community.docker.docker_container:
        name: postgres16
        image: postgres:16
        state: started
        restart_policy: always
        network_mode: ct
        volumes:
          - postgres16:/var/lib/postgresql/data
        env:
          POSTGRES_HOST_AUTH_METHOD: trust

    - name: Create /var/run/postgresql directory
      become: yes
      file:
        path: /var/run/postgresql
        state: directory
        mode: '0777'
        owner: root
        group: root

    - name: Run PGBouncer container
      become: yes
      community.docker.docker_container:
        name: pgbouncer
        image: pgbouncer/pgbouncer:latest
        state: started
        restart_policy: always
        network_mode: ct
        volumes:
          - /var/run/postgresql:/var/run/postgresql
          - /opt/db.cue.tools/utils/docker/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        env:
          DATABASES: "ctwiki = host=postgres96,freedb = host=postgres96,discogs = host=postgres96,musicbrainz = host=musicbrainz-docker-db-1,ctdb = host=postgres96"
          PGBOUNCER_AUTH_TYPE: trust
          PGBOUNCER_AUTH_FILE: /etc/pgbouncer/userlist.txt
          PGBOUNCER_UNIX_SOCKET_DIR: /var/run/postgresql
        # PGBOUNCER_LISTEN_PORT: 6544

    - name: Build a container image for the Apache2 reverse proxy
      become: yes
      community.docker.docker_image:
        name: proxy
        tag: latest
        source: build
        state: present
        build:
          path: /opt/db.cue.tools/utils/docker/proxy
          dockerfile: Dockerfile

    - name: Run apache2 reverse proxy container
      become: yes
      community.docker.docker_container:
        name: proxy
        image: proxy:latest
        state: started
        restart_policy: always
        network_mode: ct
        volumes:
          - /etc/letsencrypt:/etc/letsencrypt
        ports:
          - "80:80"
          - "443:443"

    - name: Get system architecture for Docker Compose URL
      become: yes
      shell: echo "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)"
      register: docker_compose_url

    - name: Install Docker Compose
      become: yes
      ansible.builtin.get_url:
        url: "{{ docker_compose_url.stdout }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Verify Docker Compose installation
      become: yes
      command: docker-compose --version
