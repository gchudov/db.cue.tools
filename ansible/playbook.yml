---
- name: Manage system setup
  hosts: localhost
  tasks:
    - name: Install Docker
      become: yes
      yum:
        name: docker
        state: present

    - name: Enable Docker service
      become: yes
      service:
        name: docker
        enabled: yes

    - name: Start Docker service
      become: yes
      service:
        name: docker
        state: started

    - name: Install tmux
      become: yes
      yum:
        name: tmux
        state: present

    - name: Install Pip
      become: yes
      yum:
        name: pip
        state: present

    - name: Check if Docker network 'ct' exists
      command: docker network inspect ct
      register: docker_network_check
      ignore_errors: yes

    - name: Create Docker network 'ct'
      command: docker network create ct
      when: docker_network_check.rc != 0

    - name: Download and install VS Code CLI for Amazon Graviton
      become: yes
      shell: |
        if [ ! -f /usr/local/bin/code ]; then
          curl -L --no-progress-meter "https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64" -o /tmp/vscode-cli.tar.gz
          tar -xzf /tmp/vscode-cli.tar.gz -C /usr/local/bin
          rm /tmp/vscode-cli.tar.gz
        fi
      args:
        creates: /usr/local/bin/code

  #   - name: Add freedb cron job
  #     ansible.builtin.cron:
  #       name: "freedb"
  #       minute: "51"
  #       hour: "1"
  #       day: "5"
  #       job: "/opt/ctdb/www/ctdbweb/utils/freedb/request_spot.sh >> /var/log/reqspot 2>&1"
  #       user: "root"

  #   - name: Add discogs cron job
  #     ansible.builtin.cron:
  #       name: "discogs"
  #       minute: "41"
  #       hour: "1"
  #       day: "5"
  #       job: "/opt/ctdb/www/ctdbweb/utils/discogs/request_spot.sh >> /var/log/reqspot 2>&1"
  #       user: "root"

  #   - name: Add mbslave cron job
  #     ansible.builtin.cron:
  #       name: "mbslave"
  #       minute: "15"
  #       job: "/root/mbslave/mbslave-sync.py >> /var/log/mbreplication 2>&1"
  #       user: "root"

  #   - name: Add stats cron job
  #     ansible.builtin.cron:
  #       name: "stats"
  #       minute: "1"
  #       job: "/usr/bin/psql -U ctdb_user ctdb -f /opt/ctdb/www/ctdbweb/utils/hourly_stats.sql >> /dev/null 2>&1"
  #       user: "root"

    - name: Run PostgreSQL 16 container
      become: yes
      community.docker.docker_container:
        name: postgres16
        image: postgres:16
        state: started
        restart_policy: always
        network_mode: ct
        volumes:
          - postgres16:/var/lib/postgresql/data
        env:
          POSTGRES_HOST_AUTH_METHOD: trust

    - name: Create /var/run/postgresql directory
      become: yes
      file:
        path: /var/run/postgresql
        state: directory
        mode: '0777'
        owner: root
        group: root

    - name: Run PGBouncer container
      become: yes
      community.docker.docker_container:
        name: pgbouncer
        image: pgbouncer/pgbouncer:latest
        state: started
        restart_policy: always
        network_mode: ct
        volumes:
          - /var/run/postgresql:/var/run/postgresql
          - /opt/db.cue.tools/utils/docker/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
        env:
          DATABASES: "ctwiki = host=postgres96,freedb = host=postgres96,discogs = host=postgres96,musicbrainz = host=musicbrainz-docker-db-1 dbname=musicbrainz_db,ctdb = host=postgres96"
          PGBOUNCER_AUTH_TYPE: trust
          PGBOUNCER_AUTH_FILE: /etc/pgbouncer/userlist.txt
          PGBOUNCER_UNIX_SOCKET_DIR: /var/run/postgresql
        # PGBOUNCER_LISTEN_PORT: 6544

    - name: Check if Certbot certificate exists
      stat:
        path: /etc/letsencrypt/live/cue.tools/cert.pem
      register: certbot_cert

    - name: Run Certbot container
      become: yes
      community.docker.docker_container:
        name: certbot
        image: certbot/dns-route53:latest
        state: started
        restart_policy: always
        volumes:
          - /etc/letsencrypt:/etc/letsencrypt
          - /var/lib/letsencrypt:/var/lib/letsencrypt
        command: certonly --dns-route53 --agree-tos --domains cue.tools,db.cue.tools,www.cue.tools -n
      when: not certbot_cert.stat.exists

    - name: Build a container image for the Apache2 reverse proxy
      become: yes
      community.docker.docker_image:
        name: proxy
        tag: latest
        source: build
        state: present
        build:
          path: /opt/db.cue.tools/utils/docker/proxy
          dockerfile: Dockerfile

    - name: Run apache2 reverse proxy container
      become: yes
      community.docker.docker_container:
        name: proxy
        image: proxy:latest
        state: started
        restart_policy: always
        network_mode: ct
        volumes:
          - /etc/letsencrypt:/etc/letsencrypt
        ports:
          - "80:80"
          - "443:443"

    - name: Fetch secret from AWS Secrets Manager and run container with config
      become: yes
      block:
        - name: Ensure boto3 is installed
          pip:
            name: boto3
            state: present

        - name: Ensure botocore is installed
          pip:
            name: botocore
            state: present

        - name: Fetch secret from AWS Secrets Manager
          set_fact:
            secret_password: "{{ lookup('amazon.aws.aws_secret', 'adminer_otp_secret', region='us-east-1') | from_json | json_query('ADMINER_OTP_SECRET') }}"
          no_log: true

        - name: Generate configuration content
          set_fact:
            config_content: "{{ lookup('template', '/opt/db.cue.tools/utils/docker/adminer/login-otp.php.def') }}"
          no_log: true

        - name: Run adminer container
          become: yes
          community.docker.docker_container:
            name: adminer
            image: adminer:latest
            state: started
            restart_policy: always
            network_mode: ct
            volumes:
              - /var/run/postgresql:/var/run/postgresql
            env:
              ADMINER_DEFAULT_SERVER: musicbrainz-docker-db-1

        - name: Write configuration directly into container
          shell: |
            echo '{{ config_content }}' | docker exec -i adminer sh -c 'cat > /var/www/html/plugins-enabled/login-otp.php && chmod 0640 /var/www/html/plugins-enabled/login-otp.php'
          args:
            executable: /bin/bash
          no_log: true

    - name: Install Docker Compose
      become: yes
      block:
        - name: Check Docker Compose version
          command: docker-compose --version
          register: docker_compose_check
          failed_when: false
          changed_when: false

        - name: Install Docker Compose if not present
          when: docker_compose_check.rc != 0
          block:
            - name: Determine system architecture
              ansible.builtin.setup:
                filter: ansible_architecture

            - name: Set Docker Compose download URL
              set_fact:
                compose_arch: "{{ 'aarch64' if ansible_architecture == 'aarch64' else 'x86_64' }}"
                compose_url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"

            - name: Download Docker Compose
              ansible.builtin.get_url:
                url: "{{ compose_url }}"
                dest: /usr/local/bin/docker-compose
                mode: '0755'

        - name: Verify Docker Compose installation
          command: docker-compose --version
          changed_when: false

